{
  "questions": [
    {
      "id": 1,
      "question": "What is Dependency Injection (DI)?",
      "options": {
        "a": "DI helps you couple your application objects to each other",
        "b": "DI helps you decouple your application objects from each other",
        "c": "DI helps you compile your application objects",
        "d": "DI helps you encrypt your application objects",
        "e": "DI helps you deploy your application objects"
      },
      "correct": "b"
    },
    {
      "id": 2,
      "question": "In which ways can Dependency Injection (DI) be implemented?",
      "options": {
        "a": "Field and Constructor",
        "b": "Setter and Constructor",
        "c": "Method and Field",
        "d": "Interface and Class",
        "e": "Property and Method"
      },
      "correct": "b"
    },
    {
      "id": 3,
      "question": "Which annotation is used to handle GET requests in Spring?",
      "options": {
        "a": "@PostMapping",
        "b": "@RequestMapping",
        "c": "@GetMapping",
        "d": "@GetMethod",
        "e": "@HttpGet"
      },
      "correct": "c"
    },
    {
      "id": 4,
      "question": "How configuration metadata can be represented?",
      "options": {
        "a": "I. XML-Based only",
        "b": "II. Annotation-Based only",
        "c": "III. Java-Based only",
        "d": "I. XML-Based II. Annotation-Based III. Java-Based",
        "e": "None of the above"
      },
      "correct": "d"
    },
    {
      "id": 5,
      "question": "Which one is NOT a benefit of the Spring Framework?",
      "options": {
        "a": "Dependency Injection",
        "b": "Aspect-Oriented Programming",
        "c": "Lightweight framework",
        "d": "Built-in web server",
        "e": "Inversion of Control"
      },
      "correct": "d"
    },
    {
      "id": 6,
      "question": "Which annotation provides automatic wiring?",
      "options": {
        "a": "@Component",
        "b": "@Service",
        "c": "@Autowired",
        "d": "@Repository",
        "e": "@Configuration"
      },
      "correct": "c"
    },
    {
      "id": 7,
      "question": "Which scope attribute should be declared in Spring to produce a new bean instance each time one is needed?",
      "options": {
        "a": "Singleton",
        "b": "Prototype",
        "c": "Request",
        "d": "Session",
        "e": "Application"
      },
      "correct": "b"
    },
    {
      "id": 8,
      "question": "Which scope is default?",
      "options": {
        "a": "Prototype",
        "b": "Request",
        "c": "Session",
        "d": "Singleton",
        "e": "Application"
      },
      "correct": "d"
    },
    {
      "id": 9,
      "question": "What is the difference between authentication and authorization?",
      "options": {
        "a": "Authentication is checking user permissions, authorization is verifying identity",
        "b": "They are the same thing",
        "c": "Authentication is user verification (who you are), authorization is permission checking (what you can do)",
        "d": "Authentication is for databases, authorization is for web services",
        "e": "Authentication is automatic, authorization is manual"
      },
      "correct": "c"
    },
    {
      "id": 10,
      "question": "Which annotation is used to map a URL to either an entire class or a particular handler method?",
      "options": {
        "a": "@GetMapping",
        "b": "@PostMapping",
        "c": "@RequestMapping",
        "d": "@PathVariable",
        "e": "@RequestParam"
      },
      "correct": "c"
    },
    {
      "id": 11,
      "question": "Which one scopes a bean definition to an HTTP session?",
      "options": {
        "a": "Singleton",
        "b": "Prototype",
        "c": "Request",
        "d": "Session",
        "e": "Application"
      },
      "correct": "d"
    },
    {
      "id": 12,
      "question": "What is the difference between Spring Boot and Spring?",
      "options": {
        "a": "Spring Boot is slower than Spring",
        "b": "Spring Boot requires more configuration than Spring",
        "c": "Spring Boot is Spring's convention-over-configuration solution for creating stand-alone, production-grade Spring-based applications",
        "d": "Spring Boot is completely different from Spring",
        "e": "Spring Boot is only for web applications"
      },
      "correct": "c"
    },
    {
      "id": 13,
      "question": "Which one is default template engine in Spring Boot?",
      "options": {
        "a": "JSP",
        "b": "Freemarker",
        "c": "Velocity",
        "d": "Thymeleaf",
        "e": "Mustache"
      },
      "correct": "d"
    },
    {
      "id": 14,
      "question": "Which one is not a component annotation?",
      "options": {
        "a": "@Component",
        "b": "@Service",
        "c": "@Repository",
        "d": "@Controller",
        "e": "@Qualifier"
      },
      "correct": "e"
    },
    {
      "id": 15,
      "question": "Where does the HTTP Request come first?",
      "options": {
        "a": "Controller",
        "b": "Service",
        "c": "DispatcherServlet",
        "d": "Repository",
        "e": "Model"
      },
      "correct": "c"
    },
    {
      "id": 16,
      "question": "Which one loads bean definitions, wire beans together, and dispense beans upon request and additionally it adds more enterprise-specific functionality?",
      "options": {
        "a": "BeanFactory",
        "b": "ApplicationContext",
        "c": "ServletContext",
        "d": "WebApplicationContext",
        "e": "ConfigurableApplicationContext"
      },
      "correct": "b"
    },
    {
      "id": 17,
      "question": "JOKER: What are the core modules of Spring Framework?",
      "options": {
        "a": "Core, Context, Web, Data Access",
        "b": "MVC, Security, Boot, Cloud",
        "c": "REST, SOAP, GraphQL, WebSocket",
        "d": "MySQL, PostgreSQL, MongoDB, Redis",
        "e": "HTML, CSS, JavaScript, TypeScript"
      },
      "correct": "a",
      "isJoker": true
    },
    {
      "id": 18,
      "question": "JOKER: What is the @Transactional annotation used for?",
      "options": {
        "a": "Managing HTTP transactions",
        "b": "Managing database transactions",
        "c": "Managing file transactions",
        "d": "Managing network transactions",
        "e": "Managing memory transactions"
      },
      "correct": "b",
      "isJoker": true
    },
    {
      "id": 19,
      "question": "JOKER: What is the application.properties file used for in Spring Boot?",
      "options": {
        "a": "Writing Java code",
        "b": "Creating HTML templates",
        "c": "Application configuration",
        "d": "Defining CSS styles",
        "e": "Writing JavaScript code"
      },
      "correct": "c",
      "isJoker": true
    },
    {
      "id": 20,
      "question": "JOKER: What is the @PreAuthorize annotation used for in Spring Security?",
      "options": {
        "a": "User authentication",
        "b": "Method-level authorization control",
        "c": "Password encryption",
        "d": "Session management",
        "e": "Cookie management"
      },
      "correct": "b",
      "isJoker": true
    }
  ]
}
